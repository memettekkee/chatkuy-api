// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  messages      Message[]
  participants  Participant[]
}

model Conversation {
  id            String         @id @default(cuid())
  name          String?        
  image         String?
  isGroup       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  messages      Message[]
  participants  Participant[]
}

model Participant {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  role           Role          @default(MEMBER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([userId, conversationId])
}

model Message {
  id              String       @id @default(cuid())
  content         String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  isRead          Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum Role {
  ADMIN
  MEMBER
}
